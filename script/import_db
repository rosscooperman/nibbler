#!/usr/bin/env ruby
# A small script to import a production gzip'ed dump

require File.dirname(__FILE__) + "/../config/environment"

class DatabaseLoader
  PRODUCTION_DB_USERNAME = "FIXME"
  PRODUCTION_DB_HOST     = "%"

  attr_reader :db_dump_filename
  
  def initialize(filename, run_migrations=false)
    @db_dump_filename = filename.dup
    @run_migrations = run_migrations ? true : false
  end
  
  def load
    gunzip
    substitute
    import
    run_migrations
  end
  
  def gunzip
    if needs_unziping?
      puts "* Gunzip'ing #{db_dump_filename}"
      puts %x(gunzip #{db_dump_filename})
      @db_dump_filename.gsub!(".gz", "")
    end
  end

  def substitute
    puts "* Substituting in #{new_username_at_host}"
    contents = File.read(db_dump_filename)
    contents.gsub!('DEFINER=`#{PRODUCTION_DB_USERNAME}`@`#{PRODUCTION_DB_HOST}` SQL SECURITY DEFINER',
                   "DEFINER=#{new_username_at_host} SQL SECURITY DEFINER")
    File.open(db_dump_filename, "w") do |f|
      f.write(contents)
    end
  end
  
  def import
    puts "* Importing db dump #{db_dump_filename} to #{database_name}"

    cmd = "mysql -u root #{database_name} < #{db_dump_filename}"
    puts "** Executing: #{cmd}"
    `#{cmd}`
  end
  
  def run_migrations
    if should_run_migrations?
      puts "* Running migrations"
      puts `RAILS_ENV=#{rails_env} rake db:migrate`
    end
  end

private
  
  def should_run_migrations?
    @run_migrations == true
  end

  def new_username_at_host
    "#{database_username}@#{database_host}"
  end

  def needs_unziping?
    db_dump_filename.include?(".gz")
  end

  def database_name
    @database_name ||= config["database"]
  end
  
  def database_username
    config["username"]
  end
  
  def database_host
    config["host"]
  end
  
  def config
    yaml_config[rails_env]
  end

  def rails_env
    RAILS_ENV
  end

  def yaml_config
    @yaml_config ||= YAML.load(File.read("config/database.yml"))
  end

  def db_dump_contents(&blk)
    File.open(db_dump_filename, "r+", &blk)
  end
end

db_loader = DatabaseLoader.new(ARGV[0], ARGV[1])
db_loader.load
